@using Random_Recipe_Finder_MAUI_APP.Models
@using Random_Recipe_Finder_MAUI_APP.Services
@inject IRecipeApiService RecipeApiService
@inject Random_Recipe_Finder_MAUI_APP.Services.DatabaseHelper DatabaseHelper
@page "/searchrecipeview"

<div class="search-container">
    <input @bind="searchQuery" placeholder="Search for a recipe..." />
    <button @onclick="SearchRecipes">Search</button>
</div>

@if (recipes != null && recipes.Count > 0)
{
    @foreach (var recipe in recipes)
    {
        <div class="recipe-view">
            <h3>@recipe.StrMeal</h3>

            <div class="recipe-header">
                <img src="@recipe.StrMealThumb" alt="recipe image" class="recipe-image" />
                <div class="recipe-details">
                    <p><strong>Category:</strong> @recipe.StrCategory</p>
                    <p><strong>Area:</strong> @recipe.StrArea</p>
                    <p><strong>Tags:</strong> @recipe.StrTags</p>
                </div>

                <button class="favorite-btn" @onclick="() => ToggleFavorite(recipe)">
                    @if (favoriteRecipeIds.Contains(recipe.IdMeal))
                    {
                        <span style="color: gold;">★</span>
                    }
                    else
                    {
                        <span style="color: gray;">☆</span>
                    }
                </button>
            </div>

            <div class="recipe-instructions">
                <h4>Instructions</h4>
                <p>@recipe.StrInstructions</p>
            </div>

            <div class="recipe-ingredients">
                <h4>Ingredients</h4>
                <ul>
                    @if (recipe.Ingredients != null || recipe.Measurements != null)
                    {
                        int ingredientCount = recipe.Ingredients?.Count ?? 0;
                        int measurementCount = recipe.Measurements?.Count ?? 0;
                        int maxCount = Math.Max(ingredientCount, measurementCount);

                        @for (int i = 0; i < maxCount; i++)
                        {
                            string ingredient = i < ingredientCount ? recipe.Ingredients[i] : "";

                            string measurement = i < measurementCount ? recipe.Measurements[i] : "";

                            if (!string.IsNullOrWhiteSpace(ingredient) || !string.IsNullOrWhiteSpace(measurement))
                            {
                                if (!string.IsNullOrWhiteSpace(ingredient) && !string.IsNullOrWhiteSpace(measurement))
                                {
                                    <li>@ingredient - @measurement</li>
                                }
                                else if (!string.IsNullOrWhiteSpace(ingredient))
                                {
                                    <li>@ingredient</li>
                                }
                                else
                                {
                                    <li>@measurement</li>
                                }
                            }
                        }
                    }
                </ul>
            </div>

        </div>
    }
}

@code {
    private string searchQuery="";
    private List<Recipe> recipes = new List<Recipe>();
    private HashSet<int> favoriteRecipeIds = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        await LoadFavorites();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadFavorites();
        StateHasChanged();
    }

    private async Task SearchRecipes()
    {
        var res = await RecipeApiService.SearchRecipeByName(searchQuery);
        if (res != null && res.Count > 0)
        {
            recipes = res;
            await LoadFavorites();
            StateHasChanged();
        }
    }

    private async Task LoadFavorites()
    {
        var savedRecipes = await DatabaseHelper.GetRecipesAsync();
        favoriteRecipeIds = new HashSet<int>(savedRecipes.Select(r => r.IdMeal));
    }

    private async Task ToggleFavorite(Recipe recipe)
    {
        if (favoriteRecipeIds.Contains(recipe.IdMeal))
        {
            var existingRecipe = (await DatabaseHelper.GetRecipesAsync())
                                 .FirstOrDefault(r => r.IdMeal == recipe.IdMeal);
            if (existingRecipe != null)
            {
                await DatabaseHelper.DeleteRecipeAsync(existingRecipe);
                favoriteRecipeIds.Remove(recipe.IdMeal);
            }
        }
        else
        {
            await DatabaseHelper.SaveRecipeAsync(recipe);
            favoriteRecipeIds.Add(recipe.IdMeal);
        }
        StateHasChanged();
    }
}
