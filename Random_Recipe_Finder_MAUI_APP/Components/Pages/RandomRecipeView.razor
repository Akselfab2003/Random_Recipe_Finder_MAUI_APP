@using Random_Recipe_Finder_MAUI_APP.Models
@using Random_Recipe_Finder_MAUI_APP.Services
@inject IRecipeApiService RecipeApiService
@inject Random_Recipe_Finder_MAUI_APP.Services.DatabaseHelper DatabaseHelper
@page "/randomrecipeview"

<div class="recipe-view">
    <h3>@recipe.StrMeal</h3>

    <div class="recipe-header">
        <img src="@recipe.StrMealThumb" alt="recipe image" class="recipe-image" />
        <div class="recipe-details">
            <p><strong>Category:</strong> @recipe.StrCategory</p>
            <p><strong>Area:</strong> @recipe.StrArea</p>
            <p><strong>Tags:</strong> @recipe.StrTags</p>
        </div>

        <!-- Favorite Star Button -->
        <button class="favorite-btn" @onclick="ToggleFavorite">
            @if (isFavorite)
            {
                <span style="color: gold;">★</span>
            }
            else
            {
                <span style="color: gray;">☆</span>
            }
        </button>
    </div>

    <div class="recipe-instructions">
        <h4>Instructions</h4>
        <p>@recipe.StrInstructions</p>
    </div>

    <div class="recipe-ingredients">
        <h4>Ingredients</h4>
        <ul>
            @for (int i = 0; i < recipe.Ingredients.Count; i++)
            {
                <li>@recipe.Ingredients[i] - @recipe.Measurements[i]</li>
            }
        </ul>
    </div>
</div>

@code {
    private Recipe recipe = new Recipe();
    private bool isFavorite = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRandomRecipe();
    }

    private async Task LoadRandomRecipe()
    {
        recipe = await RecipeApiService.GetRandomRecipe();
        await CheckIfFavorite();
    }

    private async Task CheckIfFavorite()
    {
        var savedRecipes = await DatabaseHelper.GetRecipesAsync();
        isFavorite = savedRecipes.Any(r => r.IdMeal == recipe.IdMeal);
        StateHasChanged();
    }

    private async Task ToggleFavorite()
    {
        if (isFavorite)
        {
            var existingRecipe = (await DatabaseHelper.GetRecipesAsync())
                                 .FirstOrDefault(r => r.IdMeal == recipe.IdMeal);
            if (existingRecipe != null)
            {
                await DatabaseHelper.DeleteRecipeAsync(existingRecipe);
            }
            isFavorite = false;
        }
        else
        {
            await DatabaseHelper.SaveRecipeAsync(recipe);
            isFavorite = true;
        }

        StateHasChanged();
    }
}